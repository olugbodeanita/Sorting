#include <iostream>

template<class T>
void swap(T& x, T& y){
  T temp = x;
  x = y;
  y = temp;
}

template<class T>
void insertionSort(T data[], int n){
  //iterate through array sequentially
  for(int i = 1; i < n; i++){
    int j = i;
    //while previous item > given one, we keep swapping
    while((j > 0) && (data[j - 1] > data[j])){
      swap(data[j], data[j - 1]);
      j--;
    }
  }
}
//Insertion sort starts at array[1] because it starts measuring array[1], array[1 - 1]

template<class T>
void print(T data, int n){
  for(int i = 0; i < n; i++){
    std::cout << data[i] << std::endl;
  }
}

int main(){
  int data[] = {4, 2, 1, 5, 3};
  
  int n = sizeof(data)/sizeof(data[0]);
  
  insertionSort(data, n);
  print(data, n);
}

/* insertionSort(array){
  //iterate through array sequentially
  for (i = 1; i < length(array); i++){
    j = i;
    //while previous item > given one, we keep swapping
    while(j > 0 && array[j - 1] > array[j]{
      swap(array, j, j - 1);
      j = j - 1;
      //that's why there's lots of shifts in insertion sort
    }
  }
}
*/
